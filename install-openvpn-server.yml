- hosts: vpn-server
  gather_facts: false
  vars_files:
    - vars_files/var_file_strings.yml
  tasks:
    - name: Update
      apt:
        update_cache=yes
        force_apt_get=yes
        cache_valid_time=3600
    - name: Upgrade
      apt:
        upgrade=dist
        force_apt_get=yes
    - name: Install required packages
      apt:
        pkg: 
        - openvpn
        - python3-pip
        - iptables-persistent
    - name: Install pexpect
      pip:
        name: pexpect
    - name: Set IP forwarding
      replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: 'net.ipv4.ip_forward=1'
    - name: sysctl -p
      shell: sysctl -p
    - name: Move EasyRsa
      copy:
        src: /usr/share/easy-rsa
        dest: /{{ vpn_server_user_access }}
        remote_src: yes
    - name: Create vars
      copy:
        src: /{{ vpn_server_user_access }}/easy-rsa/vars.example
        dest: /{{ vpn_server_user_access }}/easy-rsa/vars
        remote_src: yes
    - name: Remove hash
      replace: 
        path: /{{ vpn_server_user_access }}/easy-rsa/vars
        regexp: '{{ item.string_in_vars }}'
        replace: '{{ item.new_string_in_vars }}'
      with_items:
        - "{{ ovpn_server_vars }}"
    - name: Change default atributes
      replace: 
        path: /{{ vpn_server_user_access }}/easy-rsa/vars
        regexp: '{{ item.atribute_default }}'
        replace: '{{ item.atribute }}'
      with_items:
        - "{{ ovpn_server_vars }}"
    - name: Check if pki exists
      stat:
        path: /{{ vpn_server_user_access }}/pki
      register: pkidir
    - name: Run easyrsa script with init-pki
      command: sh /{{ vpn_server_user_access }}/easy-rsa/easyrsa init-pki
      when: not pkidir.stat.exists
    - name: Check if pki/ca.crt exists
      stat:
        path: /{{ vpn_server_user_access }}/pki/ca.crt
      register: pkica
    - name: Run easyrsa script with build-ca nopass
      expect:
        command: sh /{{ vpn_server_user_access }}/easy-rsa/easyrsa build-ca nopass
        responses:
          'Common': '"{{ vpn_server_name }}"'
      when: not pkica.stat.exists
    - name: Check if pki/reqs/server.req exists
      stat:
        path: /{{ vpn_server_user_access }}/pki/reqs/server.req
      register: reqserv
    - name: Run easyrsa script with gen-req server nopass
      expect:
        command: sh /{{ vpn_server_user_access }}/easy-rsa/easyrsa gen-req server nopass
        responses:
          'Common': '"{{ vpn_server_name }}"'
      when: not reqserv.stat.exists
    - name: Check if pki/issued/server.crt exists
      stat:
        path: /{{ vpn_server_user_access }}/pki/issued/server.crt
      register: servcrt
    - name: Sign request
      expect:
        command: sh /{{ vpn_server_user_access }}/easy-rsa/easyrsa sign-req server server
        responses:
          'Confirm': 'yes'
      when: not servcrt.stat.exists
    - name: Check if pki/dh.pem exists
      stat:
        path: /{{ vpn_server_user_access }}/pki/dh.pem
      register: pkidh
    - name: Create /etc/openvpn/server.conf
      file:
        path: /{{ vpn_server_user_access }}/pki/dh.pem
        state: absent     
      when: pkidh.stat.exists
    - name: Create Diffie-Hellman key
      command: sh /{{ vpn_server_user_access }}/easy-rsa/easyrsa gen-dh
    - name: Check if ta.key exists
      stat:
        path: /{{ vpn_server_user_access }}/ta.key 
      register: takey
    - name: Generate HMAC signature
      shell: openvpn --genkey --secret ta.key
      when: not takey.stat.exists
    - name: Copy dh.pem to /etc/openvpn
      copy:
        src: /{{ vpn_server_user_access }}/pki/dh.pem
        dest: /etc/openvpn
        remote_src: yes
    - name: Copy ta.key to /etc/openvpn
      copy:
        src: /{{ vpn_server_user_access }}/ta.key
        dest: /etc/openvpn
        remote_src: yes      
    - name: Copy ca.crt to /etc/openvpn
      copy:
        src: /{{ vpn_server_user_access }}/pki/ca.crt
        dest: /etc/openvpn
        remote_src: yes
    - name: Copy server.key to /etc/openvpn
      copy:
        src: /{{ vpn_server_user_access }}/pki/private/server.key
        dest: /etc/openvpn
        remote_src: yes
    - name: Copy server.crt to /etc/openvpn
      copy:
        src: /{{ vpn_server_user_access }}/pki/issued/server.crt
        dest: /etc/openvpn
        remote_src: yes
    - name: Check if /etc/openvpn/server.conf exists
      stat:
        path: /etc/openvpn/server.conf
      register: ovpnconf
    - name: Delete /etc/openvpn/server.conf
      file:
        path: /etc/openvpn/server.conf
        state: absent
      when: ovpnconf.stat.exists
    - name: Create /etc/openvpn/server.conf
      file:
        path: /etc/openvpn/server.conf
        state: touch
        mode: '755'
    - name: Configure port
      lineinfile:
        path: /etc/openvpn/server.conf
        line: port {{ vpn_server_port }}
    - name: Configure protocol
      lineinfile:
        path: /etc/openvpn/server.conf
        line: proto {{ vpn_server_proto }}       
    - name: Configure network device
      lineinfile:
        path: /etc/openvpn/server.conf
        line: dev {{ vpn_server_dev }}
    - name: Configure ca.crt
      lineinfile:
        path: /etc/openvpn/server.conf
        line: ca ca.crt
    - name: Configure server.crt
      lineinfile:
        path: /etc/openvpn/server.conf
        line: cert server.crt
    - name: Configure server.key
      lineinfile:
        path: /etc/openvpn/server.conf
        line: key server.key
    - name: Configure dh.pem
      lineinfile:
        path: /etc/openvpn/server.conf
        line: dh dh.pem
    - name: Configure network
      lineinfile:
        path: /etc/openvpn/server.conf
        line: server {{ vpn_server_network }}       
    - name: Configure push redirect-gateway
      lineinfile:
        path: /etc/openvpn/server.conf
        line: 'push "redirect-gateway def1 bypass-dhcp"'
    - name: Configure push shcp-option DNS1
      lineinfile:
        path: /etc/openvpn/server.conf
        line: 'push "dhcp-option DNS {{ vpn_server_dns_1 }}"'    
    - name: Configure push shcp-option DNS2
      lineinfile:
        path: /etc/openvpn/server.conf
        line: 'push "dhcp-option DNS {{ vpn_server_dns_2 }}"'       
    - name: Configure keepalive
      lineinfile:
        path: /etc/openvpn/server.conf
        line: keepalive {{ vpn_server_keepalive }}
    - name: Configure tls-auth
      lineinfile:
        path: /etc/openvpn/server.conf
        line: tls-auth ta.key 0
    - name: Configure cipher
      lineinfile:
        path: /etc/openvpn/server.conf
        line: cipher {{ vpn_server_cipher }}     
    - name: Configure user
      lineinfile:
        path: /etc/openvpn/server.conf
        line: user {{ vpn_server_user_access }}         
    - name: Configure group
      lineinfile:
        path: /etc/openvpn/server.conf
        line: group {{ vpn_server_group }}  
    - name: Configure persist-key
      lineinfile:
        path: /etc/openvpn/server.conf
        line: persist-key
    - name: Configure persist-tun
      lineinfile:
        path: /etc/openvpn/server.conf
        line: persist-tun
    - name: Configure status path
      lineinfile:
        path: /etc/openvpn/server.conf
        line: status {{ vpn_server_status_path }}
    - name: Configure log path
      lineinfile:
        path: /etc/openvpn/server.conf
        line: log {{ vpn_server_log_path }}
    - name: Configure log-append path
      lineinfile:
        path: /etc/openvpn/server.conf
        line: log-append {{ vpn_server_log_append_path }}
    - name: Configure verb
      lineinfile:
        path: /etc/openvpn/server.conf
        line: verb {{ vpn_server_verb }}
    - name: Configure explicit-exit-notify
      lineinfile:
        path: /etc/openvpn/server.conf
        line: explicit-exit-notify {{ vpn_server_exp_exit_not }}
    - name: Iptables postrouting masquerade
      iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ vpn_server_network_different_mask }}"
        out_interface : "{{ vpn_server_dev_out }}"
        jump: MASQUERADE
    - name: Save iptables
      community.general.iptables_state:
        state: saved
        path: /etc/iptables/rules.v4
    - name: Start ovpn server
      systemd:
        name: openvpn@server
        state: started
        enabled: yes